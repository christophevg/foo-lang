// heartbeat.dsl
// author: Christophe VG

// example implementation of heartbeat detection algorithm.
// this file includes extensive comments to clarify the DSL and some of the
// inner workings of the code generator.

// explicit declaration of module, allows for multiple modules in a source file
module heartbeat

// define constants to configure the solution. types are inferred from the
// value (integer, float (with .), boolean (true/false), "string", 'atom')
// or can be explicited using the ": <type>" typing information
const heartbeat_interval     = 3000    // 3 sec
const validation_interval    = 1000    // check nodes every second
const max_fail_count         =    3    // 3 strikes and you're out

// imports general purpose functionality. this is done explicit to avoid lookup
// through all possible collections of functions. function collections are
// simple C modules of which the public functions can be called.
// importing functions require full typing of the prototype
from crypto import sha1(byte*)                : byte[20]
from crypto import sha1_compare(byte*, byte*) : boolean
from time   import now()                      : timestamp

// modules can be extended. the implications can differ. here the internal
// representation of a node is extended with some properties that are specific
// to this algorithm. the nodes module already implements things like unique
// identification of nodes. internal modification of the module allows for
// different network stacks and properties to be implemented (e.g. Zigbee,...)
// from the outside (=here), all this is abstracted into nodes in general.
// the format is a simple hash of <name> : <type> = value's
extend nodes with {
  last_seen  : timestamp = 0
  fail_count : byte      = 0
  sane       : boolean   = true    // nodes and sane at start
  sequence   : byte      = 0
}

// note: the nodes module keeps track of all nodes it encounters. the very first
// node is our own node, which can be referenced through nodes.self

// we can interact with the module through event handlers and extensions.
// extensions are functions that are added to the nodes and are linked to events
// or have an execution strategy.
// event handlers are triggered when certain events happen within the scope of
// nodes. typically this consists of existing functions that are executed. the
// registered event handler will then be called with the same arguments. think
// of it as kind of aspect-programming meets event handling, because using
// the @before and @after annotations, the event handler can kick in before
// or after the event will happen - premonition anyone :-)

// every node is validated using this function at the validation_interval.
@every(validation_interval)
with nodes do function(node) {
  // init node's last_seen value and initial sanity
  if(node.last_seen == 0) {
    node.last_seen = now()
  }
  // validate if the time that passed since the last heartbeat isn't too long
  if( now() - node.last_seen > heartbeat_interval ) {
    // the heartbeat is late, let's track this incident
    node.fail_count++
  }

  // make sure that the number of failures doesn't exceed our limits
  if( node.fail_count > max_fail_count ) {
    node.sane = false
  }
}

// event handler when receiving data. called by the nodes module onto the node
// representing the actual node that is running this code. a reference to the
// sender is provided, aswell as the FULL payload. to extract the part that is
// of interest, matching can be used.
after nodes receive do function(me, from, hop, to, payload) {
  // payload is a list of data. we can consider one or more cases
  case payload {
    // e.g. we can check if we find an atom and three variables after is
    contains( [ #heartbeat, time:timestamp, sequence, signature:byte[20] ] ) {

      // skip our own heartbeat messages
      if(from == me) { return }

      // init node's last_seen value and initial sanity
      if(from.last_seen == 0) {
        from.sane = true
      }

      // don't handle untrusted nodes
      if( ! from.sane ) { return }

      // validate signature
      if(sha1_compare(signature, [sequence, time])) {
        from.last_seen = now()
        from.sequence  = sequence
      } else {
        from.fail_count++
      }
    }
  }
}

// adding a send function to our own node, with an execution strategy to have it
// executed every some milliseconds.

// we can also define a function and use it by name afterwards. typing of the
// parameters is not required and will be validated when used. every use will
// be processed and an error will be raised in case of conflicting inference
function broadcast_heartbeat(node) {
  time = now()
  nodes.broadcast([ #heartbeat, node.sequence, time, sha1([node.sequence,time]) ])
  node.sequence++
}

@every(heartbeat_interval) with nodes.self do broadcast_heartbeat
