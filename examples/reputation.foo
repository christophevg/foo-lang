// reputation.dsl
// author: Christophe VG

// example implementation of a reputation-based intrusion detection algorithm
// the algorithm checks if a message that is sent to another node is actually
// propagated further to a next node. if not, that node is considered non-
// cooperative and gets a bad reputation

// for more information about the DSL and its implementated considerations
// see heartbeat.dsl. only functional and additional DSL aspects will be added
// in comments here.

module reputation

const forward_timeout             = 1000
const check_interval              = 5000
const broadcast_interval          = 7500
const aging_weight                = 0.98  // factor to age reputation
const indirect_threshold  : float = 0.9   // lower limit for including indirect

// importing functions require full typing
from time import now() : integer

extend nodes with {
  queue      : [timestamp, payload]* = []
  msg_count  : byte                  = 0
  // alpha and beta are the parameters of the Beta distribution used to 
  // represent the reputation of a node
  alpha      : float                 = 0.0
  beta       : float                 = 0.0
  // trust is the single value [0-1] computed from alpha and beta
  trust      : float                 = 0.0
}

// we can react on "events". events are actions taken by nodes. actions are
// statements performed by nodes (e.g. sending data, raising of events,...)
after nodes transmit do function(from, to, hop, payload) {
  // only if we expect the addressee to actually route the message futher...
  if( hop == to ) { return }

  // count the total number of packets that are being sent and for which we
  // expect to see a forward action
  if( ! payload.contains([#reputation]) ) {
    hop.msg_count++

    // we add the payload to a queue of payloads we expect to be forwarded by
    // the hop.
    hop.queue.push( [ now() + forward_timeout, payload ] )
  }
}

after nodes receive do function(me, from, hop, to, payload) {
  case payload {
    contains( [ #reputation, of:node, alpha:float, beta:float ] ) {
      if( from.trust > indirect_threshold ) {
        // taking into account of indirect reputation information
        weight = (2 * from.alpha) /
                 ( (from.beta+2) * (alpha + beta + 2) * 2 * from.alpha )
        of.alpha += weight * alpha
        of.beta  += weight * beta
      }
    }
    else
      // when we see a payload that matches one we were expecting from the 
      // sender we remove it from its queue by removing any items in the queue 
      // that match the payload
      // the remove function takes a matching argument, which here uses the "_"
      // don't care operator
      from.queue.remove([ _, payload ])
  }
}

// validation consists of counting the number of non-cooperative actions of a 
// node (aka non-forwarded payloads) and recomputing the reputation taking into
// account these new 
@every(check_interval)
with nodes do function(node) {
  // the remove function returns the number of removals, which we simply
  // use as failure count. the matching here uses the don't care operator for
  // the payload and uses a boolean expression to match passed timeouts
  failures = node.queue.remove([ < now(), _ ])

  // update the reputation parameters
  node.alpha = (aging_weight * node.alpha) + node.msg_count - failures
  node.beta  = (aging_weight * node.beta ) + failures

  // and compute trust
  node.trust = (node.alpha + 1) / (node.alpha + node.beta + 2)

  // notify bad node
  if(node.trust < 0.25) {
    node.send([ #excluded ])
  }

  // reset message counter
  node.msg_count = 0
}

// of all nodes we track, we send out reputation information
@every(broadcast_interval)
with nodes do function(node) {
 nodes.broadcast( [ #reputation, node, node.alpha, node.beta ] )
}
